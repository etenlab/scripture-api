# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @key(fields: String!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @link(import: [link__Import], url: String!) on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Book {
  id: String!
  name: String!

  """
  Get words in book. Every call performs the full graph traversal (up to some depth), so using small pageSize values will not much improve the performance
  """
  words(
    """Page number starting from 0"""
    pageNumber: Int!

    """Page size, must be > 0"""
    pageSize: Int!

    """Search text to be included in the words: %search%"""
    search: String!
  ): [Word!]!

  """Get number of words in book"""
  wordsCount(
    """Search text to be included in the words: %search%"""
    search: String!
  ): Int!
}

type Query {
  book(id: String!): Book!
}

type StrongsWord {
  id: String!
  strongsDef: String!
  strongsId: String!
}

type Word {
  id: String!
  strongsWord: StrongsWord
  text: String!
}

scalar link__Import